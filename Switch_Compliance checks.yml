---
- name: Cisco 9300 Compliance Check
  hosts: 192.168.29.164
  gather_facts: no
  connection: network_cli

  vars:
    expected_syslog_ip: "192.168.29.3"
    expected_dns_primary: "192.168.29.3"
    expected_dns_secondary: "192.168.29.3"
    expected_ntp_primary: "192.168.29.3"
    expected_ntp_secondary: "192.168.29.3"

  collections:
    - cisco.ios

  tasks:
    - name: Gather running configuration
      cisco.ios.ios_command:
        commands:
          - show running-config
      register: running_config

    - name: Extract syslog server host IPs
      set_fact:
        syslog_hosts: "{{ running_config.stdout[0] | regex_findall('logging\\s+host\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Extract DNS server IPs
      set_fact:
        dns_servers: "{{ running_config.stdout[0] | regex_findall('ip\\s+name-server\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Extract NTP server IPs
      set_fact:
        ntp_servers: "{{ running_config.stdout[0] | regex_findall('ntp\\s+server\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Check Syslog server compliance
      assert:
        that:
          - expected_syslog_ip in syslog_hosts
        fail_msg: "Syslog NON-COMPLIANT: found {{ syslog_hosts }}, expected {{ expected_syslog_ip }}"
        success_msg: "Syslog COMPLIANT"

    - name: Check DNS primary compliance
      assert:
        that:
          - dns_servers | length > 0
          - dns_servers[0] == expected_dns_primary
        fail_msg: "DNS primary NON-COMPLIANT: found {{ dns_servers }}, expected primary = {{ expected_dns_primary }}"
        success_msg: "DNS primary COMPLIANT"
      ignore_errors: yes

    - name: Check DNS secondary compliance
      assert:
        that:
          - dns_servers | length > 1
          - dns_servers[1] == expected_dns_secondary
        fail_msg: "DNS secondary NON-COMPLIANT or missing: found {{ dns_servers }}, expected secondary = {{ expected_dns_secondary }}"
        success_msg: "DNS secondary COMPLIANT"
      ignore_errors: yes

    - name: Check NTP primary compliance
      assert:
        that:
          - ntp_servers | length > 0
          - ntp_servers[0] == expected_ntp_primary
        fail_msg: "NTP primary NON-COMPLIANT: found {{ ntp_servers }}, expected primary = {{ expected_ntp_primary }}"
        success_msg: "NTP primary COMPLIANT"

    - name: Check NTP secondary compliance
      assert:
        that:
          - ntp_servers | length > 1
          - ntp_servers[1] == expected_ntp_secondary
        fail_msg: "NTP secondary NON-COMPLIANT or missing: found {{ ntp_servers }}, expected secondary = {{ expected_ntp_secondary }}"
        success_msg: "NTP secondary COMPLIANT"

    - name: Gather interface configuration sections
      cisco.ios.ios_command:
        commands:
          - show running-config | section interface
      register: intf_config

    - name: Split interface blocks into list
      set_fact:
        interface_blocks: "{{ intf_config.stdout[0].split('\ninterface ') | select('match','^GigabitEthernet') | list }}"

    - name: Assert PortFast enabled on {{ item.split('\n')[0] }}
      vars:
        iface_name: "{{ item.split('\n')[0] }}"
        block_text: "{{ item }}"
      assert:
        that:
          - "'spanning-tree portfast' in block_text"
        fail_msg: "PortFast NON-COMPLIANT on {{ iface_name }}"
        success_msg: "PortFast COMPLIANT on {{ iface_name }}"
      loop: "{{ interface_blocks }}"
      loop_control:
        label: "{{ item.split('\\n')[0] }}"

    - name: Assert Port-Security enabled on {{ item.split('\n')[0] }}
      vars:
        iface_name: "{{ item.split('\n')[0] }}"
        block_text: "{{ item }}"
      assert:
        that:
          - "'switchport port-security' in block_text"
        fail_msg: "Port-Security NON-COMPLIANT on {{ iface_name }}"
        success_msg: "Port-Security COMPLIANT on {{ iface_name }}"
      loop: "{{ interface_blocks }}"
      loop_control:
        label: "{{ item.split('\\n')[0] }}"

    - name: Assert Storm Control enabled on {{ item.split('\n')[0] }}
      vars:
        iface_name: "{{ item.split('\n')[0] }}"
        block_text: "{{ item }}"
      assert:
        that:
          - "'storm-control' in block_text"
        fail_msg: "Storm Control NON-COMPLIANT on {{ iface_name }}"
        success_msg: "Storm Control COMPLIANT on {{ iface_name }}"
      loop: "{{ interface_blocks }}"
      loop_control:
        label: "{{ item.split('\\n')[0] }}"
