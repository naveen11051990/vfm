---
- name: Cisco 9300 Compliance Check
  hosts: 192.168.29.164
  gather_facts: no
  connection: network_cli

  vars:
    expected_syslog_ip: "192.168.29.3"
    expected_dns_primary: "192.168.29.3"
    expected_dns_secondary: "192.168.29.3"
    expected_ntp_primary: "192.168.29.3"
    expected_ntp_secondary: "192.168.29.3"
    compliance_report: {}

  collections:
    - cisco.ios

  tasks:
    - name: Gather running configuration
      cisco.ios.ios_command:
        commands:
          - show running-config
      register: running_config

    - name: Extract syslog server host IPs
      set_fact:
        syslog_hosts: "{{ running_config.stdout[0] | regex_findall('logging\\s+host\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Extract DNS server IPs
      set_fact:
        dns_servers: "{{ running_config.stdout[0] | regex_findall('ip\\s+name-server\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Extract NTP server IPs
      set_fact:
        ntp_servers: "{{ running_config.stdout[0] | regex_findall('ntp\\s+server\\s+((?:\\d{1,3}\\.){3}\\d{1,3})', multiline=True) }}"

    - name: Build syslog compliance result
      set_fact:
        compliance_report: "{{ compliance_report | combine({'syslog': {(syslog_hosts | first | default('not_configured')): ('COMPLIANT' if expected_syslog_ip in syslog_hosts else 'NON-COMPLIANT')}}) }}"

    - name: Build DNS compliance result
      set_fact:
        compliance_report: "{{ compliance_report | combine({'dns': {'primary': {'ip': (dns_servers[0] | default('not_configured')), 'compliance': ('COMPLIANT' if (dns_servers | length > 0 and dns_servers[0] == expected_dns_primary) else 'NON-COMPLIANT')}, 'secondary': {'ip': (dns_servers[1] | default('not_configured')), 'compliance': ('COMPLIANT' if (dns_servers | length > 1 and dns_servers[1] == expected_dns_secondary) else 'NON-COMPLIANT')}}}) }}"

    - name: Build NTP compliance result
      set_fact:
        compliance_report: "{{ compliance_report | combine({'ntp': {'primary': {'ip': (ntp_servers[0] | default('not_configured')), 'compliance': ('COMPLIANT' if (ntp_servers | length > 0 and ntp_servers[0] == expected_ntp_primary) else 'NON-COMPLIANT')}, 'secondary': {'ip': (ntp_servers[1] | default('not_configured')), 'compliance': ('COMPLIANT' if (ntp_servers | length > 1 and ntp_servers[1] == expected_ntp_secondary) else 'NON-COMPLIANT')}}}) }}"

    - name: Gather interface configuration sections
      cisco.ios.ios_command:
        commands:
          - show running-config | section interface
      register: intf_config

    - name: Split interface blocks into list
      set_fact:
        interface_blocks: "{{ intf_config.stdout[0].split('\ninterface ') | select('match','^GigabitEthernet') | list }}"

    - name: Initialize interfaces compliance dictionary
      set_fact:
        interfaces_compliance: {}

    - name: Check interface compliance
      vars:
        iface_name: "{{ item.split('\n')[0] }}"
        block_text: "{{ item }}"
        portfast_compliant: "{{ 'COMPLIANT' if 'spanning-tree portfast' in block_text else 'NON-COMPLIANT' }}"
        portsec_compliant: "{{ 'COMPLIANT' if 'switchport port-security' in block_text else 'NON-COMPLIANT' }}"
        storm_compliant: "{{ 'COMPLIANT' if 'storm-control' in block_text else 'NON-COMPLIANT' }}"
      set_fact:
        interfaces_compliance: "{{ interfaces_compliance | combine({iface_name: {'portfast': portfast_compliant, 'port_security': portsec_compliant, 'storm_control': storm_compliant}}) }}"
      loop: "{{ interface_blocks }}"
      loop_control:
        label: "{{ item.split('\\n')[0] }}"

    - name: Add interfaces to compliance report
      set_fact:
        compliance_report: "{{ compliance_report | combine({'interfaces': interfaces_compliance}) }}"

    - name: Display Compliance Report
      debug:
        msg: "{{ compliance_report | to_nice_json }}"
