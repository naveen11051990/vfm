---
- name: Gather security rules - Non standard ports policies
  hosts: "PRODUCTIONFIREWALL"
  connection: local

  vars:
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    recommended_ntp_primary: "10.1.1.10"  
    recommended_ntp_secondary: "10.1.1.11"  
    recommended_dns_primary: "8.8.8.8"  
    recommended_dns_secondary: "8.8.4.4"
    
  collections:
    - paloaltonetworks.panos

  tasks:

- name: Gather full config of the firewall  
  paloaltonetworks.panos.panos_facts:  
     provider: "{{ device }}"  
     gather_subset: ['config']  
  register: pan_config  

- name: Extract configured NTP servers  
  set_fact:  
    ntp_servers: >-  
      {{ pan_config.ansible_facts['net_config'].devices.entry.system.ntp.server | map(attribute='entry') | list }}  

- name: Extract configured DNS servers  
  set_fact:  
    dns_servers: >-  
      {{ pan_config.ansible_facts['net_config'].devices.entry.system.dns.server | list }}  

- name: Check NTP primary correct  
  assert:  
    that:  
       - ntp_servers.0 == recommended_ntp_primary  
    fail_msg: >  
          "Primary NTP server is NON-COMPLIANT: found {{ ntp_servers.0 }} but expected {{ recommended_ntp_primary }}"  
    success_msg: >  
          "Primary NTP server COMPLIANT"  

 - name: Check NTP secondary correct  
   assert:  
      that:  
        - ntp_servers | length > 1 and ntp_servers.1 == recommended_ntp_secondary  
   fail_msg: >  
          "Secondary NTP server is NON-COMPLIANT or missing: found {{ ntp_servers }} but expected second = {{ recommended_ntp_secondary }}"  
   success_msg: >  
          "Secondary NTP server COMPLIANT"  

 - name: Check DNS primary correct  
   assert:  
      that:  
          - dns_servers.0 == recommended_dns_primary  
      fail_msg: >  
          "Primary DNS server is NON-COMPLIANT: found {{ dns_servers.0 }} but expected {{ recommended_dns_primary }}"  
      success_msg: >  
          "Primary DNS server COMPLIANT"  

- name: Check DNS secondary correct  
  assert:  
    that:  
        - dns_servers | length > 1 and dns_servers.1 == recommended_dns_secondary  
    fail_msg: >  
          "Secondary DNS server is NON-COMPLIANT or missing: found {{ dns_servers }} but expected second = {{ recommended_dns_secondary }}" 
    success_msg: >  
          "Secondary DNS server COMPLIANT"  
              
- name: Get all security rules
  paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        gathered_filter: "*"
        state: gathered
  register: sec_rules

- name: Output
  ansible.builtin.debug:
      msg: "{{ sec_rules }}"

- name: Filter any any rules
  ansible.builtin.set_fact:
        insecure_rules: >-
          {{
            (sec_rules.gathered | default([]))
            | rejectattr('service', 'equalto', ['443'])
            | selectattr('application', 'equalto', ['ssl'])
            | list
          }}

    
- name: Get all security rules - Any_Any rules
  paloaltonetworks.panos.panos_security_rule:
    provider: "{{ device }}"
    gathered_filter: "*"
    state: gathered
    register: sec_rules

- name: Output
  ansible.builtin.debug:
        msg: "{{ sec_rules }}"

- name: Filter any any rules
  ansible.builtin.set_fact:
        insecure_rules: >-
          {{
            (sec_rules.gathered | default([]))
            | selectattr('source_ip', 'equalto', ['any'])
            | selectattr('destination_ip', 'equalto', ['any'])
            | selectattr('service', 'equalto', ['any'])
            | list
          }}
          
- name: Show rule violations - Any-Any rules (if any)
  ansible.builtin.debug:
         msg: "{{ insecure_rules | map(attribute='rule_name') | list }}"
- name: Show rule violations - non standard ports (if any)
  ansible.builtin.debug:
        msg: "{{ insecure_rules | map(attribute='rule_name') | list }}"





