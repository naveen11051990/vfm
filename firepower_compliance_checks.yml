---
- name: Cisco Firepower 9300 Compliance Check
  hosts: firepower_firewalls
  gather_facts: no
  connection: httpapi

  vars:
    expected_syslog_ip: "192.168.29.3"
    expected_dns_primary: "192.168.29.3"
    expected_dns_secondary: "192.168.29.3"
    expected_ntp_primary: "192.168.29.3"
    expected_ntp_secondary: "192.168.29.3"

  collections:
    - cisco.ftd

  tasks:
    # Get system information and configuration
    - name: Get FTD device configuration
      cisco.ftd.ftd_configuration:
        operation: getDeviceConfig
      register: device_config

    # Syslog Server Compliance
    - name: Extract syslog servers from configuration
      set_fact:
        syslog_servers: >-
          {{
            device_config.response.syslogServers
            | default([])
            | map(attribute='host')
            | list
          }}
      when: device_config.response.syslogServers is defined

    - name: Check Syslog server compliance
      assert:
        that:
          - syslog_servers is defined
          - expected_syslog_ip in syslog_servers
        fail_msg: "Syslog NON-COMPLIANT: found {{ syslog_servers | default('none') }}, expected {{ expected_syslog_ip }}"
        success_msg: "Syslog COMPLIANT"
      ignore_errors: yes

    # DNS Server Compliance
    - name: Extract DNS servers from configuration
      set_fact:
        dns_servers: >-
          {{
            device_config.response.dnsServers
            | default([])
            | map(attribute='ipAddress')
            | list
          }}
      when: device_config.response.dnsServers is defined

    - name: Check DNS primary compliance
      assert:
        that:
          - dns_servers is defined
          - dns_servers | length > 0
          - dns_servers[0] == expected_dns_primary
        fail_msg: "DNS primary NON-COMPLIANT: found {{ dns_servers | default('none') }}, expected primary = {{ expected_dns_primary }}"
        success_msg: "DNS primary COMPLIANT"
      ignore_errors: yes

    - name: Check DNS secondary compliance
      assert:
        that:
          - dns_servers is defined
          - dns_servers | length > 1
          - dns_servers[1] == expected_dns_secondary
        fail_msg: "DNS secondary NON-COMPLIANT or missing: found {{ dns_servers | default('none') }}, expected secondary = {{ expected_dns_secondary }}"
        success_msg: "DNS secondary COMPLIANT"
      ignore_errors: yes

    # NTP Server Compliance
    - name: Extract NTP servers from configuration
      set_fact:
        ntp_servers: >-
          {{
            device_config.response.ntpServers
            | default([])
            | map(attribute='ipAddress')
            | list
          }}
      when: device_config.response.ntpServers is defined

    - name: Check NTP primary compliance
      assert:
        that:
          - ntp_servers is defined
          - ntp_servers | length > 0
          - ntp_servers[0] == expected_ntp_primary
        fail_msg: "NTP primary NON-COMPLIANT: found {{ ntp_servers | default('none') }}, expected primary = {{ expected_ntp_primary }}"
        success_msg: "NTP primary COMPLIANT"
      ignore_errors: yes

    - name: Check NTP secondary compliance
      assert:
        that:
          - ntp_servers is defined
          - ntp_servers | length > 1
          - ntp_servers[1] == expected_ntp_secondary
        fail_msg: "NTP secondary NON-COMPLIANT or missing: found {{ ntp_servers | default('none') }}, expected secondary = {{ expected_ntp_secondary }}"
        success_msg: "NTP secondary COMPLIANT"
      ignore_errors: yes

    # Get interface configuration
    - name: Get physical interfaces
      cisco.ftd.ftd_configuration:
        operation: getPhysicalInterfaceList
      register: physical_interfaces

    - name: Get security zones
      cisco.ftd.ftd_configuration:
        operation: getSecurityZoneList
      register: security_zones

    # Interface Security Compliance Checks
    - name: Check interfaces are assigned to security zones
      vars:
        interface_name: "{{ item.name }}"
        has_zone: "{{ item.securityZone is defined and item.securityZone != None }}"
      assert:
        that:
          - has_zone
        fail_msg: "Security Zone NON-COMPLIANT on {{ interface_name }}: No security zone assigned"
        success_msg: "Security Zone COMPLIANT on {{ interface_name }}"
      loop: "{{ physical_interfaces.response.items | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.mode is defined and item.mode == 'ROUTED'
      ignore_errors: yes

    # Access Control Policy Compliance
    - name: Get Access Control Policy
      cisco.ftd.ftd_configuration:
        operation: getAccessPolicyList
      register: access_policies

    - name: Check Access Control Policy is configured
      assert:
        that:
          - access_policies.response.items is defined
          - access_policies.response.items | length > 0
        fail_msg: "Access Control Policy NON-COMPLIANT: No access policy configured"
        success_msg: "Access Control Policy COMPLIANT"
      ignore_errors: yes

    # NAT Policy Compliance
    - name: Get NAT Policy
      cisco.ftd.ftd_configuration:
        operation: getNatPolicyList
      register: nat_policies

    - name: Check NAT Policy is configured
      assert:
        that:
          - nat_policies.response.items is defined
          - nat_policies.response.items | length > 0
        fail_msg: "NAT Policy NON-COMPLIANT: No NAT policy configured"
        success_msg: "NAT Policy COMPLIANT"
      ignore_errors: yes

    # Check intrusion prevention is enabled
    - name: Get intrusion policy
      cisco.ftd.ftd_configuration:
        operation: getIntrusionPolicyList
      register: intrusion_policies

    - name: Check Intrusion Prevention is configured
      assert:
        that:
          - intrusion_policies.response.items is defined
          - intrusion_policies.response.items | length > 0
        fail_msg: "Intrusion Prevention NON-COMPLIANT: No intrusion policy configured"
        success_msg: "Intrusion Prevention COMPLIANT"
      ignore_errors: yes

    # High Availability Compliance (if applicable)
    - name: Get HA configuration
      cisco.ftd.ftd_configuration:
        operation: getHAConfig
      register: ha_config
      ignore_errors: yes

    - name: Check High Availability is configured
      assert:
        that:
          - ha_config.response is defined
          - ha_config.response.haEnabled | default(false)
        fail_msg: "High Availability NON-COMPLIANT: HA is not enabled"
        success_msg: "High Availability COMPLIANT"
      when: ha_config is defined and ha_config.response is defined
      ignore_errors: yes

    # Generate compliance summary
    - name: Generate compliance summary
      debug:
        msg: |
          =====================================
          Firepower 9300 Compliance Check Complete
          =====================================
          Device: {{ inventory_hostname }}
          Check the assert results above for compliance status
