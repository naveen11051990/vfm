---
- name: "Download and install version {{ version_item }}"
  block:
    - name: "Attempting to download and install version {{ version_item }}"
      paloaltonetworks.panos.panos_software:
        provider: "{{ device }}"
        version: "{{ version_item }}"
        download: true
        install: true
        restart: false
      register: software_install

  rescue:
    - name: "Retrying download and install for version {{ version_item }}"
      paloaltonetworks.panos.panos_software:
        provider: "{{ device }}"
        version: "{{ version_item }}"
        download: true
        install: true
        restart: false
      retries: 2
      delay: 30

- name: "Restart device to apply version {{ version_item }}"
  paloaltonetworks.panos.panos_op:
    provider: "{{ device }}"
    cmd: "request restart system"
  async: 60
  poll: 0
  register: restart_job

- name: "Wait for device to begin restart after upgrade to {{ version_item }}"
  ansible.builtin.wait_for:
    host: "{{ device.ip_address }}"
    port: 443
    state: stopped
    timeout: 300
  delegate_to: localhost

- name: "Wait for device to come back online after upgrading to {{ version_item }}"
  ansible.builtin.wait_for:
    host: "{{ device.ip_address }}"
    port: 443
    state: started
    timeout: 900
  delegate_to: localhost

- name: "Wait additional time for services to stabilize"
  ansible.builtin.pause:
    seconds: 60

- name: "Check device readiness after upgrade to {{ version_item }}"
  paloaltonetworks.panos.panos_check:
    provider: "{{ device }}"
  register: ready_result
  until: ready_result is not failed and ready_result.msg == 'Device is ready.'
  retries: 30
  delay: 30
  no_log: "{{ quiet_polling }}"

- name: "Verify that version {{ version_item }} was installed successfully"
  paloaltonetworks.panos.panos_facts:
    provider: "{{ device }}"
  register: post_upgrade_facts

- name: "Assert that device is running version {{ version_item }}"
  ansible.builtin.assert:
    that:
      - post_upgrade_facts.ansible_facts.ansible_net_version is version(version_item, '==')
    fail_msg: "Upgrade to {{ version_item }} failed. Device is on {{ post_upgrade_facts.ansible_facts.ansible_net_version }}."
    success_msg: "Successfully upgraded to {{ version_item }}."

