---
- name: Staged PAN-OS software upgrade
  hosts: "UPGRADEFW"
  connection: local

  vars:
    # Provide connection details for the firewall
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"

    # Set the target PAN-OS version
    target_version: "11.1.2"

    # Suppress noisy retry logs from polling tasks
    quiet_polling: true

  collections:
    - paloaltonetworks.panos
    - community.general

  tasks:
    - name: Get current PAN-OS version
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "show system info"
      register: system_info

    - name: Set current version fact
      ansible.builtin.set_fact:
        current_version: "{{ (system_info.stdout_xml | from_xml).response.result.system['sw-version'] }}"

    - name: "Check if upgrade is needed (current: {{ current_version }}, target: {{ target_version }})"
      ansible.builtin.fail:
        msg: "Device is already at or above the target version."
      when: "current_version | version_compare(target_version, '>=')"

    - name: Get available software versions from Palo Alto Networks
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request system software check"
      register: available_software_xml

    - name: Parse available versions
      ansible.builtin.set_fact:
        available_versions: "{{ (available_software_xml.stdout_xml | from_xml).response.result['sw-updates'].versions.entry | map(attribute='version') | list }}"

    - name: Determine the upgrade path
      ansible.builtin.set_fact:
        upgrade_path: >-
          {{
            (
              available_versions | select('version_compare', current_version, '>')
                                 | select('version_compare', target_version, '<')
                                 | select('regex', '.*\.0$')
                                 | list
            ) + [target_version] | unique | sort(version_type='loose')
          }}

    - name: "Upgrade path determined: {{ upgrade_path }}"
      ansible.builtin.debug:
        msg: "The following versions will be installed in order: {{ upgrade_path }}"

    # - name: Perform staged upgrade
    #   when: upgrade_path | length > 0
    #   block:
    #     - name: "Upgrading to version {{ item }}"
    #       paloaltonetworks.panos.panos_software:
    #         provider: "{{ device }}"
    #         version: "{{ item }}"
    #         download: true
    #         install: true
    #         restart: true

    #     - name: "Wait for device to be ready after upgrading to {{ item }}"
    #       paloaltonetworks.panos.panos_check:
    #         provider: "{{ device }}"
    #       register: ready_result
    #       until: "ready_result is not failed and ready_result.msg == 'Device is ready.'"
    #       retries: 120
    #       delay: 30
    #       no_log: "{{ quiet_polling }}"
    #   loop: "{{ upgrade_path }}"

    # - name: Final version check
    #   paloaltonetworks.panos.panos_op:
    #     provider: "{{ device }}"
    #     cmd: "show system info"
    #   register: final_system_info

    # - name: "Upgrade complete. Current version: {{ (final_system_info.stdout_xml | from_xml).response.result.system['sw-version'] }}"
    #   ansible.builtin.debug:
    #     msg: "Successfully upgraded to {{ (final_system_info.stdout_xml | from_xml).response.result.system['sw-version'] }}"
