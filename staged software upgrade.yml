---
- name: Staged PAN-OS software upgrade
  hosts: "{{ target | default('UPGRADEFW') }}"
  connection: local

  vars:
    # Provide connection details for the firewall
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"

    # Set the target PAN-OS version
    target_version: "11.1.10-h1"

    # Suppress noisy retry logs from polling tasks
    quiet_polling: true

  collections:
    - paloaltonetworks.panos
    - community.general

  tasks:
    - name: Get PAN-OS device facts
      paloaltonetworks.panos.panos_facts:
        provider: "{{ device }}"
      register: panos_facts

    - name: Set current version fact
      ansible.builtin.set_fact:
        current_version: "{{ panos_facts.ansible_facts.ansible_net_version }}"

    - name: "Check if upgrade is needed (current: {{ current_version }}, target: {{ target_version }})"
      ansible.builtin.fail:
        msg: "Device is already at or above the target version."
      when: current_version is version(target_version, '>=')

    - name: Refresh software index from Palo Alto Networks
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request system software check"
      register: software_check

    - name: Wait for software check to complete
      ansible.builtin.pause:
        seconds: 10

    - name: Get available software versions
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request system software info"
      register: software_info

    - name: Parse available versions from software output
      ansible.builtin.set_fact:
        available_versions: '{{ software_info.stdout | regex_findall("version=\"([0-9]+\.[0-9]+\.[0-9]+(?:-h[0-9]+)?)\"") | unique | list }}'

    - name: Debug available versions
      ansible.builtin.debug:
        msg: "Available versions: {{ available_versions }}"

    - name: Debug raw software info when no versions parsed
      ansible.builtin.debug:
        var: software_info.stdout
      when: available_versions | length == 0

    - name: "Verify that target version {{ target_version }} is available for download"
      ansible.builtin.fail:
        msg: "Target version {{ target_version }} is not in the list of available software. Available versions: {{ available_versions }}"
      when: target_version not in available_versions

    - name: Calculate upgrade path based on major.minor versions
      ansible.builtin.set_fact:
        upgrade_path: []

    - name: Build staged upgrade path
      ansible.builtin.set_fact:
        upgrade_path: "{{ upgrade_path + [target_version] }}"
      when: current_version is version(target_version, '<')

    - name: "Display upgrade path"
      ansible.builtin.debug:
        msg: "Upgrade path: {{ current_version }} → {{ upgrade_path | join(' → ') }}"
    - name: "Pre-flight check: Wait for device to be reachable"
      ansible.builtin.wait_for:
        host: "{{ device.ip_address }}"
        port: 443
        timeout: 30
      delegate_to: localhost

    # - name: "Pre-flight check: Get system resources"
    #   paloaltonetworks.panos.panos_op:
    #     provider: "{{ device }}"
    #     cmd: "show system resources"
    #   register: system_resources

    # - name: "Pre-flight check: Check device readiness"
    #   paloaltonetworks.panos.panos_check:
    #     provider: "{{ device }}"
    #   register: device_ready
    #   failed_when: false

    # - name: Perform staged upgrade
    #   include_tasks: staged_upgrade_step.yml
    #   loop: "{{ upgrade_path }}"
    #   loop_control:
    #     loop_var: version_item
    #   when: upgrade_path | length > 0

    # - name: "Post-upgrade check: Get final PAN-OS device facts"
    #   paloaltonetworks.panos.panos_facts:
    #     provider: "{{ device }}"
    #   register: final_panos_facts

    # - name: "Post-upgrade check: Verify final version is correct"
    #   ansible.builtin.assert:
    #     that:
    #       - final_panos_facts.ansible_facts.ansible_net_version is version(target_version, '==')
    #     fail_msg: "Upgrade failed. Device is on version {{ final_panos_facts.ansible_facts.ansible_net_version }} but should be on {{ target_version }}."
    #     success_msg: "Upgrade successful! Device is now running version {{ target_version }}."

    # - name: "Upgrade completed successfully"
    #   ansible.builtin.debug:
    #     msg: "Staged upgrade completed. Device upgraded from {{ current_version }} to {{ final_panos_facts.ansible_facts.ansible_net_version }}"
