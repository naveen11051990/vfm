---
- name: Upgrade firewall and content online
  hosts: "UPGRADEFW"
  connection: local

  vars:
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"

    # Content and software versions to download and install
    content_version: "9030-9720"
    software_version: "11.2.4-h12"
    reboot_firewall: true

    # Suppress noisy retry logs from polling tasks
    quiet_polling: true

  collections:
    - paloaltonetworks.panos
    - community.general

  tasks:
    - name: Check current PAN-OS version
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "show system info"
      register: system_info

    - name: Parse current content version
      set_fact:
        current_content_version: "{{ (system_info.stdout_xml | regex_search('<content-version>([^<]+)</content-version>', '\\1')) | default('unknown') }}"

    - name: Decide if content update is needed
      set_fact:
        content_update_needed: "{{ current_content_version != content_version }}"

    - name: Build content file name
      set_fact:
        content_file: "panupv2-all-contents-{{ content_version }}"
      when: content_update_needed | bool and content_version | lower != 'latest'

    - name: Start content update
      debug:
        msg: >-
          {{ 'Starting content update to version ' ~ content_version
             if content_update_needed | bool else
             'Content already at requested version ' ~ content_version ~ ' â€” skipping download/install' }}

    - name: Refresh content index
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request content upgrade check"
      register: content_check
      when: content_update_needed | bool

    - name: Extract job ID for content index refresh (if any)
      set_fact:
        content_check_jobid: "{{ (content_check.stdout_xml | regex_search('<job>(\\d+)</job>', '\\1')) | default('') }}"
      when: content_update_needed | bool and content_check.stdout_xml is defined

    - name: Wait for content index refresh to finish
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "<show><jobs><id>{{ content_check_jobid }}</id></jobs></show>"
        cmd_is_xml: true
      register: content_check_result
      until: content_check_result.stdout_xml is search('<status>FIN</status>')
      retries: 100
      delay: 5
      failed_when: content_check_result.stdout_xml is search('<result>FAIL</result>')
      when: content_update_needed | bool and (content_check_jobid | length) > 0
      no_log: "{{ quiet_polling }}"

    - name: Download content updates (latest)
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request content upgrade download latest"
      register: content_download
      when: content_update_needed | bool

    - name: Get job ID for content download
      community.general.xml:
        xmlstring: "{{ content_download.stdout_xml }}"
        xpath: /response[@status='success']/result/job
        content: text
      register: content_download_jobid
      when: content_update_needed | bool and content_download.stdout_xml is defined

    - name: Wait for content download to finish
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "<show><jobs><id>{{ content_download_jobid.matches[0].job }}</id></jobs></show>"
        cmd_is_xml: true
      register: content_download_result
      until: content_download_result.stdout_xml is search('<status>FIN</status>')
      retries: 300
      delay: 10
      failed_when: (content_download_result.stdout_xml is search('<status>FIN</status>')) and (content_download_result.stdout_xml is search('<result>FAIL</result>'))
      when: content_update_needed | bool and content_download_jobid.matches is defined and content_download_jobid.matches | length > 0
      no_log: "{{ quiet_polling }}"

    - name: Install downloaded content (latest)
      paloaltonetworks.panos.panos_op:
        provider: "{{ device }}"
        cmd: "request content upgrade install version latest"
      register: content_install
      when: content_update_needed | bool

    - name: Get job ID for content install
      community.general.xml:
        xmlstring: "{{ content_install.stdout_xml }}"
        xpath: /response[@status='success']/result/job
        content: text
      register: content_install_jobid
      when: content_update_needed | bool and content_install.stdout_xml is defined

    - block:
        - name: Wait for content install to finish
          paloaltonetworks.panos.panos_op:
            provider: "{{ device }}"
            cmd: "<show><jobs><id>{{ content_install_jobid.matches[0].job }}</id></jobs></show>"
            cmd_is_xml: true
          register: content_install_result
          until: content_install_result.stdout_xml is search('<status>FIN</status>')
          retries: 100
          delay: 5
          failed_when: (content_install_result.stdout_xml is search('<status>FIN</status>')) and (content_install_result.stdout_xml is search('<result>FAIL</result>'))
          no_log: "{{ quiet_polling }}"
      rescue:
        - name: Show content install job output on failure
          debug:
            msg: "Content install job output: {{ content_install_result.stdout_xml | default('no-xml-returned') }}"
      when: content_update_needed | bool and content_install_jobid.matches is defined and content_install_jobid.matches | length > 0

    - name: Start software update
      debug:
        msg: "Updating PAN-OS to version {{ software_version }} (download+install{{ ' + reboot' if reboot_firewall else '' }})"

    - name: Install target PAN-OS version
      paloaltonetworks.panos.panos_software:
        provider: "{{ device }}"
        version: "{{ software_version }}"
        download: true
        install: true
        restart: "{{ reboot_firewall | bool }}"

    - name: Wait for device to be ready after reboot
      paloaltonetworks.panos.panos_check:
        provider: "{{ device }}"
      changed_when: false
      register: ready_result
      until: ready_result is not failed and ready_result.msg == 'Device is ready.'
      retries: 100
      delay: 15
      when: reboot_firewall
