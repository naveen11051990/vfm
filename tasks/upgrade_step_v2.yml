---
- name: Download PAN-OS {{ version_item }}
  paloaltonetworks.panos.panos_software:
    provider: "{{ device }}"
    version: "{{ version_item }}"
    download: true
    install: false
  register: sw_download
  retries: 3
  delay: 60
  until: sw_download is not failed

- name: Install PAN-OS {{ version_item }} (no restart)
  paloaltonetworks.panos.panos_software:
    provider: "{{ device }}"
    version: "{{ version_item }}"
    download: false
    install: true
    restart: false

- name: Restart device to apply version {{ version_item }}
  paloaltonetworks.panos.panos_op:
    provider: "{{ device }}"
    cmd: "request restart system"
  async: 45
  poll: 0

- name: Wait for device to stop responding (reboot start) {{ version_item }}
  ansible.builtin.wait_for:
    host: "{{ device.ip_address }}"
    port: 443
    state: stopped
    timeout: 300
  delegate_to: localhost

- name: Wait for device to start responding (reboot complete) {{ version_item }}
  ansible.builtin.wait_for:
    host: "{{ device.ip_address }}"
    port: 443
    state: started
    timeout: 900
  delegate_to: localhost

- name: Wait for device readiness after upgrade to {{ version_item }}
  paloaltonetworks.panos.panos_check:
    provider: "{{ device }}"
  register: ready_result
  until: ready_result is not failed and ready_result.msg == 'Device is ready.'
  retries: 100
  delay: 15
  no_log: "{{ quiet_polling }}"

- name: Verify installed version is {{ version_item }}
  paloaltonetworks.panos.panos_facts:
    provider: "{{ device }}"
    gather_subset: ["system"]
  register: version_check

- name: Assert version {{ version_item }} installed successfully
  assert:
    that:
      - ansible_facts['ansible_net_version'] == version_item
    fail_msg: "Upgrade to {{ version_item }} failed. Device reports {{ ansible_facts['ansible_net_version'] }}."
    success_msg: "Successfully upgraded to {{ version_item }}."
