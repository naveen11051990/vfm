---
- name: Combined compliance checks
  hosts: "{{ hosts | default('PRODUCTIONFIREWALL') }}"
  connection: local
  gather_facts: no

  vars:
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"

  collections:
    - paloaltonetworks.panos

  tasks:
    - name: Gather all security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ device }}"
        gathered_filter: "*"
        state: gathered
      register: sec_rules

    - name: Compute any-any insecure rules
      ansible.builtin.set_fact:
        any_any_insecure_rules: >-
          {{
            (sec_rules.gathered | default([]))
            | selectattr('source_ip', 'equalto', ['any'])
            | selectattr('destination_ip', 'equalto', ['any'])
            | selectattr('service', 'equalto', ['any'])
            | list
          }}

    - name: Compute SSL on non-standard ports rules
      ansible.builtin.set_fact:
        ssl_nonstandard_port_rules: >-
          {{
            (sec_rules.gathered | default([]))
            | rejectattr('service', 'equalto', ['443'])
            | selectattr('application', 'equalto', ['ssl'])
            | list
          }}

    - name: Load expected DNS/NTP values
      ansible.builtin.set_fact:
        expected_dns_primary: "{{ dns_primary | default('') }}"
        expected_dns_secondary: "{{ dns_secondary | default('') }}"
        expected_ntp_primary: "{{ ntp_primary | default('') }}"
        expected_ntp_secondary: "{{ ntp_secondary | default('') }}"

    - name: Ensure expected DNS/NTP variables are provided
      ansible.builtin.assert:
        that:
          - expected_dns_primary is defined and expected_dns_primary | length > 0
          - expected_dns_secondary is defined and expected_dns_secondary | length > 0
          - expected_ntp_primary is defined and expected_ntp_primary | length > 0
          - expected_ntp_secondary is defined and expected_ntp_secondary | length > 0
        fail_msg: >-
          Provide expected DNS/NTP IPs via extra vars, e.g.:
          -e dns_primary=1.1.1.1 -e dns_secondary=1.0.0.1 -e ntp_primary=2.2.2.2 -e ntp_secondary=2.2.2.3

    - name: Gather running configuration
      paloaltonetworks.panos.panos_facts:
        provider: "{{ device }}"
        gather_subset: ["config"]
      register: pan_config

    - name: Extract DNS and NTP config blocks
      ansible.builtin.set_fact:
        cfg_xml: "{{ pan_config.ansible_facts.ansible_net_config | default('') }}"
        dns_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<dns-setting>.*?</dns-setting>')) | default('') }}"
        ntp_servers_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<ntp-servers>.*?</ntp-servers>')) | default('') }}"
        ntp_legacy_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<ntp>.*?</ntp>')) | default('') }}"
        ntp_primary_block: "{{ (cfg_xml | regex_search('(?s)<primary-ntp-server>.*?</primary-ntp-server>')) | default('') }}"
        ntp_secondary_block: "{{ (cfg_xml | regex_search('(?s)<secondary-ntp-server>.*?</secondary-ntp-server>')) | default('') }}"

    - name: Extract current DNS primary/secondary
      ansible.builtin.set_fact:
        dns_primary_current: "{{ (dns_block | regex_findall('<primary>([0-9\\.]+)</primary>') | first) | default('') }}"
        dns_secondary_current: "{{ (dns_block | regex_findall('<secondary>([0-9\\.]+)</secondary>') | first) | default('') }}"

    - name: Extract current NTP primary/secondary (new schema)
      ansible.builtin.set_fact:
        ntp_primary_current: "{{ (ntp_primary_block | regex_findall('<ntp-server-address>\\s*([^<\\s]+)', multiline=True) | first) | default('') }}"
        ntp_secondary_current: "{{ (ntp_secondary_block | regex_findall('<ntp-server-address>\\s*([^<\\s]+)', multiline=True) | first) | default('') }}"

    - name: Fallback extraction for legacy <ntp> schema
      ansible.builtin.set_fact:
        ntp_primary_current: "{{ ntp_primary_current if (ntp_primary_current | length) > 0 else ((ntp_legacy_block | regex_findall('<primary>([^<]+)</primary>') | first) | default('')) }}"
        ntp_secondary_current: "{{ ntp_secondary_current if (ntp_secondary_current | length) > 0 else ((ntp_legacy_block | regex_findall('<secondary>([^<]+)</secondary>') | first) | default('')) }}"

    - name: Normalize NTP values (trim whitespace)
      ansible.builtin.set_fact:
        ntp_primary_current: "{{ (ntp_primary_current | default('')) | trim }}"
        ntp_secondary_current: "{{ (ntp_secondary_current | default('')) | trim }}"

    - name: Compute DNS/NTP compliance booleans
      ansible.builtin.set_fact:
        dns_primary_ok: "{{ (dns_primary_current | default('')) == (expected_dns_primary | default('')) }}"
        dns_secondary_ok: "{{ (dns_secondary_current | default('')) == (expected_dns_secondary | default('')) }}"
        ntp_primary_ok: "{{ (ntp_primary_current | default('')) == (expected_ntp_primary | default('')) }}"
        ntp_secondary_ok: "{{ (ntp_secondary_current | default('')) == (expected_ntp_secondary | default('')) }}"

    - name: Compute overall DNS/NTP compliance
      ansible.builtin.set_fact:
        dns_ntp_overall_compliant: "{{ (dns_primary_ok and dns_secondary_ok and ntp_primary_ok and ntp_secondary_ok) | bool }}"

    - name: Build final consolidated report (concise)
      ansible.builtin.set_fact:
        final_report:
          security:
            any_any: "{{ any_any_insecure_rules | map(attribute='rule_name') | list }}"
            any_any_count: "{{ (any_any_insecure_rules | default([])) | length }}"
            ssl_nonstandard_ports: "{{ ssl_nonstandard_port_rules | map(attribute='rule_name') | list }}"
            ssl_nonstandard_ports_count: "{{ (ssl_nonstandard_port_rules | default([])) | length }}"
          dns_ntp:
            dns_primary: >-
              {{ (dns_primary_current | default('unset')) ~ ' : ' ~ ('COMPLIANT' if dns_primary_ok | bool else 'NON-COMPLIANT') }}
            dns_secondary: >-
              {{ (dns_secondary_current | default('unset')) ~ ' : ' ~ ('COMPLIANT' if dns_secondary_ok | bool else 'NON-COMPLIANT') }}
            ntp_primary: >-
              {{ (ntp_primary_current | default('unset')) ~ ' : ' ~ ('COMPLIANT' if ntp_primary_ok | bool else 'NON-COMPLIANT') }}
            ntp_secondary: >-
              {{ (ntp_secondary_current | default('unset')) ~ ' : ' ~ ('COMPLIANT' if ntp_secondary_ok | bool else 'NON-COMPLIANT') }}

    - name: Consolidated output
      ansible.builtin.debug:
        msg: "{{ final_report }}"
