---
- name: DNS/NTP IP compliance check
  hosts: "{{ hosts | default('PRODUCTIONFIREWALL') }}"
  connection: local
  gather_facts: no

  vars:
    device:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"

    # Logging configuration
    log_dir: /var/log/ansible-playbooks
    # Where to write logs. Set -e log_host=<hostname> when running under AWX/EE.
    # Defaults to localhost (controller/execution node).
    log_host: "{{ log_host | default('localhost') }}"
    log_become: true
    # Optional SSH overrides for the dynamic log target
    # log_user, log_port, log_ssh_key, log_password can be provided via extra vars

  collections:
    - paloaltonetworks.panos

  tasks:
    - name: Load expected values from simple extra vars
      set_fact:
        expected_dns_primary: "{{ dns_primary | default('') }}"
        expected_dns_secondary: "{{ dns_secondary | default('') }}"
        expected_ntp_primary: "{{ ntp_primary | default('') }}"
        expected_ntp_secondary: "{{ ntp_secondary | default('') }}"

    - name: Ensure expected DNS/NTP variables are provided
      assert:
        that:
          - expected_dns_primary is defined and expected_dns_primary | length > 0
          - expected_dns_secondary is defined and expected_dns_secondary | length > 0
          - expected_ntp_primary is defined and expected_ntp_primary | length > 0
          - expected_ntp_secondary is defined and expected_ntp_secondary | length > 0
        fail_msg: >-
          Provide expected DNS/NTP IPs via extra vars, e.g.:
          -e dns_primary=1.1.1.1 -e dns_secondary=1.0.0.1 -e ntp_primary=2.2.2.2 -e ntp_secondary=2.2.2.3

    - name: Gather running configuration
      paloaltonetworks.panos.panos_facts:
        provider: "{{ device }}"
        gather_subset: ["config"]
      register: pan_config

    - name: Extract DNS and NTP config blocks
      set_fact:
        cfg_xml: "{{ pan_config.ansible_facts.ansible_net_config | default('') }}"
        dns_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<dns-setting>.*?</dns-setting>')) | default('') }}"
        ntp_servers_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<ntp-servers>.*?</ntp-servers>')) | default('') }}"
        ntp_legacy_block: "{{ (pan_config.ansible_facts.ansible_net_config | regex_search('(?s)<ntp>.*?</ntp>')) | default('') }}"

    - name: Extract current DNS primary/secondary from dns-setting
      set_fact:
        dns_primary_current: "{{ (dns_block | regex_findall('<primary>([0-9\\.]+)</primary>') | first) | default('') }}"
        dns_secondary_current: "{{ (dns_block | regex_findall('<secondary>([0-9\\.]+)</secondary>') | first) | default('') }}"

    - name: Extract NTP blocks (primary/secondary) for robust parsing
      set_fact:
        ntp_primary_block: "{{ (cfg_xml | regex_search('(?s)<primary-ntp-server>.*?</primary-ntp-server>')) | default('') }}"
        ntp_secondary_block: "{{ (cfg_xml | regex_search('(?s)<secondary-ntp-server>.*?</secondary-ntp-server>')) | default('') }}"

    - name: Extract current NTP primary/secondary (new schema first)
      set_fact:
        ntp_primary_current: "{{ (ntp_primary_block | regex_findall('<ntp-server-address>\\s*([^<\\s]+)', multiline=True) | first) | default('') }}"
        ntp_secondary_current: "{{ (ntp_secondary_block | regex_findall('<ntp-server-address>\\s*([^<\\s]+)', multiline=True) | first) | default('') }}"

    - name: Fallback extraction for legacy <ntp> primary/secondary if needed
      set_fact:
        ntp_primary_current: "{{ ntp_primary_current if (ntp_primary_current | length) > 0 else ((ntp_legacy_block | regex_findall('<primary>([^<]+)</primary>') | first) | default('')) }}"
        ntp_secondary_current: "{{ ntp_secondary_current if (ntp_secondary_current | length) > 0 else ((ntp_legacy_block | regex_findall('<secondary>([^<]+)</secondary>') | first) | default('')) }}"

    - name: Normalize NTP values (trim whitespace)
      set_fact:
        ntp_primary_current: "{{ (ntp_primary_current | default('')) | trim }}"
        ntp_secondary_current: "{{ (ntp_secondary_current | default('')) | trim }}"

    - name: Show discovered current DNS/NTP settings
      debug:
        msg:
          - "Current DNS primary={{ dns_primary_current | default('') }}, secondary={{ dns_secondary_current | default('') }}"
          - "Current NTP primary={{ ntp_primary_current | default('') }}, secondary={{ ntp_secondary_current | default('') }}"

    - name: Compute compliance booleans
      set_fact:
        dns_primary_ok: "{{ (dns_primary_current | default('')) == (expected_dns_primary | default('')) }}"
        dns_secondary_ok: "{{ (dns_secondary_current | default('')) == (expected_dns_secondary | default('')) }}"
        ntp_primary_ok: "{{ (ntp_primary_current | default('')) == (expected_ntp_primary | default('')) }}"
        ntp_secondary_ok: "{{ (ntp_secondary_current | default('')) == (expected_ntp_secondary | default('')) }}"

    - name: Report DNS compliance
      debug:
        msg:
          - >-
            DNS Primary: {{ 'COMPLIANT' if dns_primary_ok | bool else 'NON-COMPLIANT' }}
            (found={{ dns_primary_current | default('unset') }}, expected={{ expected_dns_primary }})
          - >-
            DNS Secondary: {{ 'COMPLIANT' if dns_secondary_ok | bool else 'NON-COMPLIANT' }}
            (found={{ dns_secondary_current | default('unset') }}, expected={{ expected_dns_secondary }})

    - name: Report NTP compliance
      debug:
        msg:
          - >-
            NTP Primary: {{ 'COMPLIANT' if ntp_primary_ok | bool else 'NON-COMPLIANT' }}
            (found={{ ntp_primary_current | default('unset') }}, expected={{ expected_ntp_primary }})
          - >-
            NTP Secondary: {{ 'COMPLIANT' if ntp_secondary_ok | bool else 'NON-COMPLIANT' }}
            (found={{ ntp_secondary_current | default('unset') }}, expected={{ expected_ntp_secondary }})

    - name: Overall compliance summary
      set_fact:
        dns_ntp_overall_compliant: "{{ (dns_primary_ok and dns_secondary_ok and ntp_primary_ok and ntp_secondary_ok) | bool }}"

    - name: Show overall compliance result
      debug:
        msg: >-
          Overall DNS/NTP Compliance: {{ 'COMPLIANT' if dns_ntp_overall_compliant | bool else 'NON-COMPLIANT' }}

    - name: Detailed compliance report
      vars:
        report_lines:
          - "Expected DNS: primary={{ expected_dns_primary }}, secondary={{ expected_dns_secondary }}"
          - "Actual DNS: primary={{ dns_primary_current | default('unset') }}, secondary={{ dns_secondary_current | default('unset') }}"
          - >-
            DNS Result: primary={{ 'COMPLIANT' if dns_primary_ok | bool else 'NON-COMPLIANT' }};
            secondary={{ 'COMPLIANT' if dns_secondary_ok | bool else 'NON-COMPLIANT' }}
          - "Expected NTP: primary={{ expected_ntp_primary }}, secondary={{ expected_ntp_secondary }}"
          - "Actual NTP: primary={{ ntp_primary_current | default('unset') }}, secondary={{ ntp_secondary_current | default('unset') }}"
          - >-
            NTP Result: primary={{ 'COMPLIANT' if ntp_primary_ok | bool else 'NON-COMPLIANT' }};
            secondary={{ 'COMPLIANT' if ntp_secondary_ok | bool else 'NON-COMPLIANT' }}
          - >-
            Overall: {{ 'COMPLIANT' if dns_ntp_overall_compliant | bool else 'NON-COMPLIANT' }}
      debug:
        msg: "{{ report_lines }}"

    # ============================================================================
    # GRAFANA LOGGING TASK - ADDED AT THE END
    # ============================================================================
    - name: Compose log timestamps
      ansible.builtin.set_fact:
        log_timestamp_compact: "{{ lookup('pipe', 'date -u +%Y%m%dT%H%M%SZ') }}"
        log_timestamp_iso: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
        log_execution_date: "{{ lookup('pipe', 'date -u +%F') }}"

    - name: Compose log filename
      ansible.builtin.set_fact:
        log_filename: "dns-ntp-compliance-{{ inventory_hostname }}-{{ log_timestamp_compact }}.log"

    - name: Create log content variable
      ansible.builtin.set_fact:
        log_file_content: |
          # DNS/NTP Compliance Check Report
          host: {{ inventory_hostname }}
          device_ip: {{ device.ip_address }}
          timestamp: {{ log_timestamp_iso }}
          execution_date: {{ log_execution_date }}
          overall_compliant: {{ 'true' if dns_ntp_overall_compliant | bool else 'false' }}
          dns_primary_expected: {{ expected_dns_primary }}
          dns_primary_actual: {{ dns_primary_current | default('') }}
          dns_primary_ok: {{ 'true' if dns_primary_ok | bool else 'false' }}
          dns_secondary_expected: {{ expected_dns_secondary }}
          dns_secondary_actual: {{ dns_secondary_current | default('') }}
          dns_secondary_ok: {{ 'true' if dns_secondary_ok | bool else 'false' }}
          ntp_primary_expected: {{ expected_ntp_primary }}
          ntp_primary_actual: {{ ntp_primary_current | default('') }}
          ntp_primary_ok: {{ 'true' if ntp_primary_ok | bool else 'false' }}
          ntp_secondary_expected: {{ expected_ntp_secondary }}
          ntp_secondary_actual: {{ ntp_secondary_current | default('') }}
          ntp_secondary_ok: {{ 'true' if ntp_secondary_ok | bool else 'false' }}

    - name: Test SSH connectivity to log server
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
        {{ log_user | default('root') }}@{{ log_host }} 'echo "SSH connection successful"'
      delegate_to: localhost
      when: log_host != 'localhost'
      register: ssh_test
      failed_when: false

    - name: Display SSH test result
      ansible.builtin.debug:
        msg:
          - "SSH Test Result: {{ ssh_test.rc | default('skipped') }}"
          - "SSH Output: {{ ssh_test.stdout | default('N/A') }}"
          - "SSH Error: {{ ssh_test.stderr | default('N/A') }}"
      when: log_host != 'localhost'

    - name: Fail if SSH connection failed
      ansible.builtin.fail:
        msg: "Cannot SSH to {{ log_host }}. Please verify SSH connectivity and credentials."
      when:
        - log_host != 'localhost'
        - ssh_test.rc != 0

    - name: Create log directory and file on remote server via SSH
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no {{ log_user | default('root') }}@{{ log_host }} << 'ENDSSH'
        mkdir -p {{ log_dir }}
        cat > {{ log_dir }}/{{ log_filename }} << 'ENDLOG'
        {{ log_file_content }}
        ENDLOG
        chmod 644 {{ log_dir }}/{{ log_filename }}
        ls -lh {{ log_dir }}/{{ log_filename }}
        ENDSSH
      delegate_to: localhost
      when: log_host != 'localhost'
      register: log_create_result

    - name: Display log file creation result
      ansible.builtin.debug:
        msg:
          - "Log creation return code: {{ log_create_result.rc }}"
          - "Log creation output: {{ log_create_result.stdout }}"
          - "Log creation error: {{ log_create_result.stderr }}"
      when: log_host != 'localhost'

    - name: Verify log file exists on remote server
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no {{ log_user | default('root') }}@{{ log_host }} \
        "ls -lh {{ log_dir }}/{{ log_filename }} && wc -l {{ log_dir }}/{{ log_filename }}"
      delegate_to: localhost
      when: log_host != 'localhost'
      register: log_verify

    - name: Display verification result
      ansible.builtin.debug:
        msg:
          - "Verification: {{ log_verify.stdout }}"
          - "Log file confirmed at: {{ log_host }}:{{ log_dir }}/{{ log_filename }}"
      when: log_host != 'localhost'

    - name: Create log file locally if log_host is localhost
      ansible.builtin.copy:
        dest: "{{ log_dir }}/{{ log_filename }}"
        owner: root
        group: root
        mode: "0644"
        content: "{{ log_file_content }}"
      become: "{{ log_become }}"
      delegate_to: localhost
      when: log_host == 'localhost'
